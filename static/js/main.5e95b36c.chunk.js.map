{"version":3,"sources":["services/starWarsApi.js","context/PlanetsContext.js","components/Table.js","components/CreateFilterNumber.js","components/FilterNumbers.js","components/FilterName.js","components/FiltersActive.js","components/Filters.js","components/Header.js","App.js","index.js"],"names":["getStarWarsPlanets","fetch","then","response","json","Promise","resolve","PlanetsContext","createContext","PlanetsProvider","children","useState","planets","sucess","data","setData","filterName","setFilterName","filters","setFilters","context","fetchPlanets","value","results","Provider","numericFilters","length","reduce","acc","filter","index","array","planet","Number","column","comparison","allFilters","Table","useContext","planetsFiltered","filtersName","arrayData","name","includes","filterByName","returnFilterList","map","property","key","population","orbital_period","diameter","climate","gravity","terrain","rotation_period","surface_water","films","film","created","edited","url","createRow","CreateFilterNumber","changeValue","changeComparison","changeColumn","sendValues","hideFilters","data-testid","onChange","e","target","renderSelectFilter","type","checked","onClick","renderRadioButton","htmlFor","id","renderInputNumber","renderButtonAdd","FilterNumbers","setColumn","setComparison","setValue","newValue","newComparison","newColumn","allColumn","obj","FilterName","removeFilters","AllFilters","removeIndex","FiltersActive","saveFilter","Filters","Header","useEffect","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e95b36c.chunk.js","sourcesContent":["const STARWARS_API = 'https://swapi.co/api/planets/';\n\nconst getStarWarsPlanets = () => (\n  fetch(`${STARWARS_API}`)\n    .then((response) => (\n      response.json().then((json) => response && Promise.resolve(json)))));\n\nexport default getStarWarsPlanets;\n","import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport getStarWarsPlanets from '../services/starWarsApi';\n\nconst PlanetsContext = createContext();\n\nconst PlanetsProvider = ({ children }) => {\n  const [data, setData] = useState({ planets: [], sucess: false });\n  const [filterName, setFilterName] = useState('');\n  const [filters, setFilters] = useState([]);\n\n  const fetchPlanets = () => {\n    if (data.sucess) return;\n    getStarWarsPlanets()\n      .then((value) => {\n        setData({ planets: value.results, sucess: true });\n      });\n  };\n\n  const context = {\n    data,\n    setData,\n    filterName,\n    setFilterName,\n    filters,\n    setFilters,\n    fetchPlanets,\n  };\n\n  return (\n    <PlanetsContext.Provider value={context}>\n      {children}\n    </PlanetsContext.Provider>\n  );\n};\n\nexport { PlanetsContext, PlanetsProvider as Provider };\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, { useContext } from 'react';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\nconst renderHeadColumns = () => {\n  const columnsProperties = [\n    'Nome',\n    'População',\n    'Duração Orbita',\n    'Diametro',\n    'Clima',\n    'Gravidade',\n    'Solo',\n    'Duração Rotação',\n    'Superficie de Água',\n    'Link Filmes',\n    'Criado',\n    'Editado',\n    'Link',\n  ];\n  return (\n    <tr>\n      {columnsProperties.map((property) => <th key={property}>{property}</th>)}\n    </tr>\n  );\n};\n\nconst filterByName = (data, filterName) => {\n  if (filterName) {\n    return data.filter(({ name }) => name.includes(filterName));\n  }\n  return data;\n};\n\nconst allFilters = (data, filters) => (\n  filters.reduce((acc, filter, index) => {\n    const array = (index === 0) ? data : acc;\n    const obj = {\n      'Maior que': array.filter((planet) => Number(planet[filter.column]) > filter.value),\n      'Menor que': array.filter((planet) => Number(planet[filter.column]) < filter.value),\n      'Igual a': array.filter((planet) => planet[filter.column] === filter.value),\n    };\n    return obj[filter.comparison];\n  }, [],\n  )\n);\n\nconst numericFilters = (data, filters) => {\n  if (filters.length !== 0) return allFilters(data, filters);\n  return data;\n};\n\nconst returnFilterList = (data, filters, filtersName) => {\n  const arrayData = filterByName(data, filtersName);\n  const result = numericFilters(arrayData, filters);\n  return result;\n};\n\nconst createRow = (planet) => (\n  <tr key={planet.name}>\n    <td>{`${planet.name}`}</td>\n    <td>{`${planet.population}`}</td>\n    <td>{`${planet.orbital_period} Hours`}</td>\n    <td>{`${planet.diameter} KM`}</td>\n    <td>{`${planet.climate}`}</td>\n    <td>{`${planet.gravity}`}</td>\n    <td>{`${planet.terrain}`}</td>\n    <td>{`${planet.rotation_period} Hours`}</td>\n    <td>{`${planet.surface_water} %`}</td>\n    <td>\n      {planet.films.map((film) => <div key={film}>{film}</div>)}\n    </td>\n    <td>{`${planet.created}`}</td>\n    <td>{`${planet.edited} %`}</td>\n    <td>{`${planet.url} %`}</td>\n  </tr>\n);\n\nconst Table = () => {\n  const { data: { planets, sucess }, filters, filterName } = useContext(PlanetsContext);\n  if (!sucess) return <div>CARREGANDO</div>;\n  const planetsFiltered = returnFilterList(planets, filters, filterName);\n  return (\n    <div>\n      <table>\n        <tbody>\n          {(planetsFiltered) && renderHeadColumns()}\n          {(planetsFiltered) && planetsFiltered.map((planet) => createRow(planet))}\n        </tbody>\n      </table>\n      {(planetsFiltered.length === 0) && <h3>Planeta não encontrado</h3>}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\nconst renderSelectFilter = (changeColumn, hideFilters) => (\n  <select data-testid=\"select\" onChange={(e) => changeColumn(e.target.value)}>\n    <option value=\"\" />\n    {hideFilters.includes('population') || <option value=\"population\">População</option>}\n    {hideFilters.includes('orbital_period') || <option value=\"orbital_period\">Duração da Orbita</option>}\n    {hideFilters.includes('diameter') || <option value=\"diameter\">Diametro</option>}\n    {hideFilters.includes('rotation_period') || <option value=\"rotation_period\">Duração da Rotação</option>}\n    {hideFilters.includes('surface_water') || <option value=\"surface_water\">Superficie de Água</option>}\n  </select>\n);\n\nconst renderRadioButton = (value, changeComparison) => (\n  <div>\n    <input\n      data-testid=\"radio-comparison-maior\"\n      type=\"radio\"\n      checked={value === 'Maior que'}\n      name=\"comparison\"\n      value=\"Maior que\"\n      onClick={(e) => changeComparison(e.target.value)}\n    />\n    Maior que\n    <input\n      data-testid=\"radio-comparison-menor\"\n      type=\"radio\"\n      checked={value === 'Menor que'}\n      name=\"comparison\"\n      value=\"Menor que\"\n      onClick={(e) => changeComparison(e.target.value)}\n    />\n    Menor que\n    <input\n      data-testid=\"radio-comparison-igual\"\n      type=\"radio\"\n      checked={value === 'Igual a'}\n      name=\"comparison\"\n      value=\"Igual a\"\n      onClick={(e) => changeComparison(e.target.value)}\n    />\n    Igual a\n    </div>\n);\n\nconst renderInputNumber = (value, changeValue) => (\n  <div>\n    <label htmlFor=\"inputNumber\">\n      Números:\n    <input\n      data-testid=\"input-value\"\n      id=\"inputNumber\"\n      value={value}\n      type=\"number\"\n      onChange={(e) => changeValue(e.target.value)}\n    />\n    </label>\n  </div>\n);\n\nconst renderButtonAdd = (sendValues) => (\n  <input\n    data-testid=\"input-button-add\"\n    id=\"inputNumber\"\n    type=\"button\"\n    value=\"Adicionar Filtro\"\n    onClick={() => sendValues()}\n  />\n);\n\n\nconst CreateFilterNumber = ({\n  comparison,\n  value,\n  changeValue,\n  changeComparison,\n  changeColumn,\n  sendValues,\n}) => {\n  const { filters } = useContext(PlanetsContext);\n  if (filters.length === 5) return (<div><h2>Todos os Filtros já foram selecionados</h2></div>);\n  const hideFilters = filters.map((filter) => filter.column);\n  return (\n    <div>\n      <div>\n        {renderSelectFilter(changeColumn, hideFilters)}\n        {renderRadioButton(comparison, changeComparison)}\n        {renderInputNumber(value, changeValue)}\n        {renderButtonAdd(sendValues)}\n      </div>\n    </div>\n  );\n};\n\nCreateFilterNumber.propTypes = {\n  value: PropTypes.string.isRequired,\n  comparison: PropTypes.string.isRequired,\n  changeValue: PropTypes.func.isRequired,\n  changeColumn: PropTypes.func.isRequired,\n  changeComparison: PropTypes.func.isRequired,\n  sendValues: PropTypes.func.isRequired,\n};\n\nexport default CreateFilterNumber;\n","import React, { useContext, useState } from 'react';\nimport CreateFilterNumber from './CreateFilterNumber';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\nconst FilterNumbers = () => {\n  const [column, setColumn] = useState('');\n  const [comparison, setComparison] = useState('');\n  const [value, setValue] = useState('0');\n\n  const { setFilters, filters } = useContext(PlanetsContext);\n\n  const sendValues = () => {\n    const allColumn = filters.map((filter) => filter.column);\n    if (column !== '' && comparison !== ''\n      && !allColumn.includes(column)) {\n      const obj = { column, comparison, value };\n      setFilters([...filters, obj]);\n    }\n  };\n\n  return (\n    <div>\n      <CreateFilterNumber\n        changeValue={(newValue) => setValue(newValue)}\n        changeComparison={(newComparison) => setComparison(newComparison)}\n        changeColumn={(newColumn) => setColumn(newColumn)}\n        column={column}\n        comparison={comparison}\n        value={value}\n        sendValues={() => sendValues()}\n      />\n    </div>\n  );\n};\n\nexport default FilterNumbers;\n","import React, { useContext } from 'react';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\n\nconst FilterName = () => {\n  const { filterName, setFilterName } = useContext(PlanetsContext);\n  return (\n    <div>\n      <label htmlFor=\"filter-name\">\n        Filtro name:\n      </label>\n      <input\n        id=\"filter-name\"\n        type=\"text\"\n        value={filterName}\n        onChange={(e) => setFilterName(e.target.value)}\n      />\n    </div>\n  );\n};\n\n\nexport default FilterName;\n","import React, { useContext } from 'react';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\nconst saveFilter = (AllFilters, filter, index, setFilters, removeFilters) => {\n  const { column, comparison, value } = filter;\n  const columnsProperties = {\n    population: 'População',\n    orbital_period: 'Periodo de Orbita',\n    diameter: 'Diametro',\n    rotation_period: 'Periodo de Rotação',\n    surface_water: 'Superficie de Água',\n  };\n\n  return (\n    <div key={column}>\n      <p data-testid={`data-${column}`}>\n        {`${columnsProperties[column]}| ${comparison} | ${value} `}\n      </p>\n      <input\n        data-testid=\"remove-filter\"\n        type=\"button\"\n        value=\"X\"\n        onClick={() => removeFilters(AllFilters, index, setFilters)}\n      />\n    </div>\n  );\n};\n\nconst removeFilters = (AllFilters, removeIndex, setFilters) => {\n  setFilters([...AllFilters.filter((filter, index) => (index !== removeIndex))]);\n};\n\nconst FiltersActive = () => {\n  const { filters, setFilters } = useContext(PlanetsContext);\n  return (\n    <div>\n      {\n        filters &&\n        filters.map((filter, index) => saveFilter(\n          filters,\n          filter,\n          index,\n          setFilters,\n          removeFilters,\n          filters,\n        ))\n      }\n    </div>\n  );\n};\n\nexport default FiltersActive;\n","import React from 'react';\nimport FilterNumbers from './FilterNumbers';\nimport FilterName from './FilterName';\nimport FiltersActive from './FiltersActive';\n\nconst Filters = () => (\n  <div>\n    <h2>Nome:</h2>\n    <FilterName />\n    <h4>Filtros</h4>\n    <FiltersActive />\n    <FilterNumbers />\n  </div>\n);\n\n\nexport default Filters;\n","import React, { useContext, useEffect } from 'react';\nimport { PlanetsContext } from '../context/PlanetsContext.js';\n\n\nconst Header = () => {\n  const { fetchPlanets } = useContext(PlanetsContext);\n\n  useEffect(() => {\n    fetchPlanets();\n  });\n\n  return (\n    <h1>\n      PLANETAS DO STAR WARS SHOW\n      </h1>\n  );\n};\n\n\nexport default Header;\n","import React from 'react';\nimport { Provider } from './context/PlanetsContext.js';\nimport Table from './components/Table';\nimport Filters from './components/Filters';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Provider>\n      <Header />\n      <Filters />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'),\n);\n\n"],"sourceRoot":""}